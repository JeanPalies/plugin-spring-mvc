package @{mvcPackage};

import java.util.List;

import @{entity.getQualifiedName()};
import @{daoPackage}.@{entity.getName()}Dao;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

@Controller
@RequestMapping("/@{entityPlural}")
public class @{entity.getName()}Controller
{

	// Inject the appropriate data-access object for the given entity.
    @Autowired
      private @{entity.getName()}Dao @{ccEntity}Dao;
    
    /*
    * viewEntity(id, model) - returns the view of a single entity in the database,
    * specified by its id.  The entity is passed to a JSP template via a Model object,
    * and a String, representing the name of the JSP view, is returned.
    */
	@RequestMapping(value="/{id}", method=RequestMethod.GET)
	public String viewEntity(@PathVariable("id") Long id, Model model)
	{
		@{entity.getName()} entity = @{ccEntity}Dao.getById(id);
		model.addAttribute("entity", entity);
		return "viewEntity";
	}
	
	/*
    * viewAll() - returns a view with all entities currently in the database.
    * The list of entities is passed to the JSP template via a ModelAttribute,
    * which is returned by the function.
    */
	@RequestMapping(method=RequestMethod.GET)
	public @ModelAttribute("entities")
	List<@{entity.getName()}> viewAll()
	{
		List<@{entity.getName()}> entities = @{ccEntity}Dao.getAllEntities();
		return entities;
	}
	
	@RequestMapping(value="/{id}/delete", method=RequestMethod.POST)
	public String removeEntity(@PathVariable("id") Long id)
	{
		@{ccEntity}Dao.removeById(id);
		return "viewEntities";
	}
	
	@RequestMapping(value="/{id}", method=RequestMethod.POST)
	public String updateEntity(@{entity.getName()} entity, Model model)
	{
		@{ccEntity}Dao.update(entity);
		model.addAttribute("entity", entity);
		return "viewEntity";
	}
	
	@RequestMapping(method=RequestMethod.POST)
	public String create(@{entity.getName()} entity)
	{
		@{ccEntity}Dao.update(entity);
		return "viewEntities";
	}
}
